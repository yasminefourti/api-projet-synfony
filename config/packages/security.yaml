security:
    # D√©finition de l'algorithme pour hasher les mots de passe des utilisateurs
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # D√©finition de la source des utilisateurs
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User       # La classe User de l'application
                property: email              # Le champ utilis√© pour identifier un utilisateur

    # Configuration des firewalls (zones de s√©curit√©)
    firewalls:
        # Firewall pour l'authentification via JWT
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login           # Point d'entr√©e pour l'authentification
                username_path: email             # Champ utilis√© pour le login
                password_path: password          # Champ utilis√© pour le mot de passe
                success_handler: lexik_jwt_authentication.handler.authentication_success   # üîπ LIGNE AJOUT√âE
                failure_handler: lexik_jwt_authentication.handler.authentication_failure   # üîπ LIGNE AJOUT√âE

        # Firewall pour toutes les routes API
        api:
            pattern: ^/api
            stateless: true                      # Pas de session c√¥t√© serveur
            jwt: ~                               # Utilisation de JWT pour s√©curiser les requ√™tes

        # Firewall pour la d√©connexion
        logout:
            pattern: ^/api/logout
            stateless: true

    # D√©finition des r√®gles d'acc√®s (access_control)
    access_control:
        # Autoriser l'inscription sans token
        - { path: ^/api/register$, roles: PUBLIC_ACCESS }

        # Autoriser la connexion sans token
        - { path: ^/api/login, roles: PUBLIC_ACCESS}

        # Exemple : seules les admins peuvent acc√©der √† /api/users
        - { path: ^/api/users, roles: ROLE_ADMIN }

        # Toutes les autres routes /api n√©cessitent un token JWT
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
